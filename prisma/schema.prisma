generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReviewTargetType {
  bank
  mfo
  license
  site
}

enum Role {
  USER
  ADMIN
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  role            Role              @default(USER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// Добавляем модель экспертов
model Expert {
  id           Int     @id @default(autoincrement())
  name         String
  nameUk       String?
  slug         String  @unique
  avatar       String?
  bio          String?
  bioUk        String?
  position     String
  positionUk   String?
  experience   String
  experienceUk String?
  isActive     Boolean @default(true)
  color        String? // для визуального отличия ответов
  totalAnswers Int     @default(0)

  expertise      String[]
  expertiseUk    String[]
  achievements   String[]
  achievementsUk String[]

  telegram String?
  linkedin String?
  twitter  String?
  email    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи с ответами
  questionAnswers QuestionAnswer[]
  reviewAnswers   ReviewAnswer[]
}

model Mfo {
  id            Int     @id @default(autoincrement())
  name          String
  rating        Float
  reviews       Int
  logo          String
  licenseNumber String?
  isActive      Boolean @default(true)
  slug          String? @unique

  minAmount    Int
  maxAmount    Int
  minTerm      Int
  maxTerm      Int
  rateMin      Float
  rateMax      Float
  approvalRate Int
  decisionTime String

  // Условия
  isFirstLoanZero    Boolean @default(false)
  isInstantApproval  Boolean @default(false)
  isNoIncomeProof    Boolean @default(false)
  is24Support        Boolean @default(false)
  isSafeTransactions Boolean @default(false)
  isFlexibleTerms    Boolean @default(false)

  // Требования
  ageFrom     Int
  ageTo       Int
  citizenship String @default("РФ")
  documents   String @default("Паспорт РФ")

  // Контакты и описание
  description      String?
  phone            String?
  website          String?
  workTimeWeekdays String?
  workTimeWeekend  String?
  workTimeOnline   String?

  // Новые поля
  dailyRate     Float?   // ставка в день (%)
  commission    Float?   // комиссия (% или сумма)
  collateral    String?  // залог (если требуется)
  decisionType  String?  // решение по займу (авто/ручное)
  application   String?  // подача заявки (онлайн/офлайн)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  License            License[]
  mfoSatelliteLinks  MfoSatelliteMfo[]
  MfoSatelliteKeyMfo MfoSatelliteKeyMfo[]
  promoCodes         PromoCode[]
}

model PromoCode {
  id        Int      @id @default(autoincrement())
  code      String
  discount  String   // описание скидки (например "1000₽", "0%", "15%")
  condition String?  // условия применения
  validTill DateTime?
  mfo       Mfo      @relation(fields: [mfoId], references: [id])
  mfoId     Int
}

model License {
  id        Int      @id @default(autoincrement())
  number    String
  issuedAt  DateTime
  validTill DateTime
  mfoId     Int
  mfo       Mfo      @relation(fields: [mfoId], references: [id])
}

model Question {
  id           Int              @id @default(autoincrement())
  name         String?          // Делаем опциональным
  email        String?          // Делаем опциональным
  subject      String
  category     String
  textOriginal String
  textUk       String?
  textRu       String?
  isModerated  Boolean          @default(false)
  createdAt    DateTime         @default(now())
  targetType   ReviewTargetType
  targetId     Int

  answers QuestionAnswer[]
}

model QuestionAnswer {
  id           Int      @id @default(autoincrement())
  questionId   Int
  textOriginal String
  textUk       String?
  textRu       String?
  isModerated  Boolean  @default(false)
  
  // Поля для идентификации автора
  authorName   String?  // Для обычных пользователей
  authorEmail  String?  // Для обычных пользователей
  expertId     Int?     // Для экспертов
  
  createdAt    DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id])
  expert   Expert?  @relation(fields: [expertId], references: [id])
}

model Review {
  id           Int              @id @default(autoincrement())
  rating       Int
  textOriginal String
  textUk       String?
  textRu       String?
  isModerated  Boolean          @default(false)
  createdAt    DateTime         @default(now())
  targetType   ReviewTargetType
  targetId     Int

  answers      ReviewAnswer[]
}

// Добавляем модель ответов на отзывы
model ReviewAnswer {
  id           Int      @id @default(autoincrement())
  reviewId     Int
  textOriginal String
  textUk       String?
  textRu       String?
  isModerated  Boolean  @default(false)
  
  // Поля для идентификации автора
  authorName   String?  // Для обычных пользователей
  authorEmail  String?  // Для обычных пользователей
  expertId     Int?     // Для экспертов
  
  createdAt    DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id])
  expert Expert? @relation(fields: [expertId], references: [id])
}

// News
model NewsCategory {
  id     Int    @id @default(autoincrement())
  name   String
  nameUk String
  slug   String @unique

  icon String?
  news News[]
}

model Author {
  id           Int     @id @default(autoincrement())
  name         String
  nameUk       String?
  slug         String  @unique
  avatar       String
  bio          String?
  bioUk        String?
  position     String
  positionUk   String?
  experience   String
  experienceUk String?
  followers    Int     @default(0)
  color        String?
  totalViews   Int     @default(0)
  totalPosts   Int     @default(0)

  expertise      String[]
  expertiseUk    String[]
  achievements   String[]
  achievementsUk String[]

  telegram String?
  linkedin String?
  twitter  String?
  email    String?

  articles News[]
}

model NewsLike {
  id        Int      @id @default(autoincrement())
  newsId    Int
  news      News     @relation(fields: [newsId], references: [id])
  createdAt DateTime @default(now())

  ipHash      String?
  fingerprint String?
  cookieId    String?
}

model News {
  id             Int      @id @default(autoincrement())
  title          String
  titleUk        String
  slug           String   @unique
  slugUk         String   @unique
  body           String
  bodyUk         String
  published      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  views          Int      @default(0)
  readingMinutes Int?

  authorId Int
  author   Author @relation(fields: [authorId], references: [id])

  newsCategoryId Int?
  NewsCategory   NewsCategory? @relation(fields: [newsCategoryId], references: [id])

  NewsLike NewsLike[]
}

model FaqCategory {
  id        Int           @id @default(autoincrement())
  name      String
  nameUk    String?
  nameRu    String?
  order     Int           @default(0)
  icon      String?
  questions FaqQuestion[]
}

model FaqQuestion {
  id          Int         @id @default(autoincrement())
  questionUk  String?
  questionRu  String?
  answerUk    String?
  answerRu    String?
  order       Int         @default(0)
  isPublished Boolean     @default(false)
  categoryId  Int
  category    FaqCategory @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MfoSatelliteKey {
  id     Int    @id @default(autoincrement())
  keyUk  String
  keyRu  String
  slugUk String @unique
  slugRu String @unique

  metaTitleUk   String
  metaTitleRu   String
  metaDescUk    String
  metaDescRu    String
  titleUk       String
  titleRu       String
  descriptionUk String
  descriptionRu String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  satellites MfoSatellite[]

  mfoLinks MfoSatelliteKeyMfo[]
}

model MfoSatelliteKeyMfo {
  id    Int @id @default(autoincrement())
  keyId Int
  mfoId Int

  key MfoSatelliteKey @relation(fields: [keyId], references: [id])
  mfo Mfo             @relation(fields: [mfoId], references: [id])

  @@unique([keyId, mfoId])
}

model MfoSatellite {
  id Int @id @default(autoincrement())

  keyId Int
  key   MfoSatelliteKey @relation(fields: [keyId], references: [id])

  metaTitleUk   String
  metaTitleRu   String
  metaDescUk    String
  metaDescRu    String
  titleUk       String
  titleRu       String
  descriptionUk String
  descriptionRu String

  slugUk String @unique
  slugRu String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mfoLinks MfoSatelliteMfo[]
}

model MfoSatelliteMfo {
  id          Int @id @default(autoincrement())
  satelliteId Int
  mfoId       Int

  satellite MfoSatellite @relation(fields: [satelliteId], references: [id])
  mfo       Mfo          @relation(fields: [mfoId], references: [id])

  @@unique([satelliteId, mfoId])
}